// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: code.proto

package com.game.rpc.message.st;

public final class Code {
  private Code() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code com.game.rpc.message.st.En_Code}
   */
  public enum En_Code
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *成功
     * </pre>
     *
     * <code>E_SUSS = 0;</code>
     */
    E_SUSS(0),
    /**
     * <pre>
     *1~199 about room
     * </pre>
     *
     * <code>E_ROOM_ID_ERROR = 1;</code>
     */
    E_ROOM_ID_ERROR(1),
    /**
     * <pre>
     *房间端口错误
     * </pre>
     *
     * <code>E_ROOM_PORT_ERROR = 2;</code>
     */
    E_ROOM_PORT_ERROR(2),
    /**
     * <pre>
     *房间PID错误
     * </pre>
     *
     * <code>E_ROOM_PID_ERROR = 3;</code>
     */
    E_ROOM_PID_ERROR(3),
    /**
     * <pre>
     *房间不存在
     * </pre>
     *
     * <code>E_ROOM_NOT_EXIST = 4;</code>
     */
    E_ROOM_NOT_EXIST(4),
    /**
     * <pre>
     *200~299 about user,account
     * </pre>
     *
     * <code>E_ACCOUNT_NOT_EXIST = 200;</code>
     */
    E_ACCOUNT_NOT_EXIST(200),
    /**
     * <pre>
     *密码错误
     * </pre>
     *
     * <code>E_PASSWORD_ERROR = 201;</code>
     */
    E_PASSWORD_ERROR(201),
    /**
     * <pre>
     *账户名错误
     * </pre>
     *
     * <code>E_ACCOUNT_NAME_ERROR = 202;</code>
     */
    E_ACCOUNT_NAME_ERROR(202),
    /**
     * <pre>
     *用户角色名错误
     * </pre>
     *
     * <code>E_PLAYER_NAME_ERROR = 203;</code>
     */
    E_PLAYER_NAME_ERROR(203),
    /**
     * <pre>
     *用户角色名重复
     * </pre>
     *
     * <code>E_PLAYER_NAME_DUPLICATE_ERROR = 204;</code>
     */
    E_PLAYER_NAME_DUPLICATE_ERROR(204),
    /**
     * <pre>
     *账户名重复
     * </pre>
     *
     * <code>E_ACCOUNT_NAME_DUPLICATE_ERROR = 205;</code>
     */
    E_ACCOUNT_NAME_DUPLICATE_ERROR(205),
    /**
     * <pre>
     *网关未到用户连接
     * </pre>
     *
     * <code>E_USER_CONNECTION_NOT_FOUND = 206;</code>
     */
    E_USER_CONNECTION_NOT_FOUND(206),
    /**
     * <pre>
     *网关错误
     * </pre>
     *
     * <code>E_GATEWAY_ERROR = 30000;</code>
     */
    E_GATEWAY_ERROR(30000),
    /**
     * <pre>
     *服务错误
     * </pre>
     *
     * <code>E_SERVICE_ERROR = 30001;</code>
     */
    E_SERVICE_ERROR(30001),
    /**
     * <pre>
     *缓存错误
     * </pre>
     *
     * <code>E_CACHE_ERROR = 30002;</code>
     */
    E_CACHE_ERROR(30002),
    /**
     * <pre>
     *数据库错误
     * </pre>
     *
     * <code>E_DB_ERROR = 30003;</code>
     */
    E_DB_ERROR(30003),
    /**
     * <pre>
     *请求解析错误
     * </pre>
     *
     * <code>E_REQ_PARSE_ERROR = 30004;</code>
     */
    E_REQ_PARSE_ERROR(30004),
    /**
     * <pre>
     *未知错误
     * </pre>
     *
     * <code>E_UNKNOWN_ERROR = 30005;</code>
     */
    E_UNKNOWN_ERROR(30005),
    /**
     * <pre>
     *系统错误
     * </pre>
     *
     * <code>E_SYSTEM_ERROR = 30006;</code>
     */
    E_SYSTEM_ERROR(30006),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *成功
     * </pre>
     *
     * <code>E_SUSS = 0;</code>
     */
    public static final int E_SUSS_VALUE = 0;
    /**
     * <pre>
     *1~199 about room
     * </pre>
     *
     * <code>E_ROOM_ID_ERROR = 1;</code>
     */
    public static final int E_ROOM_ID_ERROR_VALUE = 1;
    /**
     * <pre>
     *房间端口错误
     * </pre>
     *
     * <code>E_ROOM_PORT_ERROR = 2;</code>
     */
    public static final int E_ROOM_PORT_ERROR_VALUE = 2;
    /**
     * <pre>
     *房间PID错误
     * </pre>
     *
     * <code>E_ROOM_PID_ERROR = 3;</code>
     */
    public static final int E_ROOM_PID_ERROR_VALUE = 3;
    /**
     * <pre>
     *房间不存在
     * </pre>
     *
     * <code>E_ROOM_NOT_EXIST = 4;</code>
     */
    public static final int E_ROOM_NOT_EXIST_VALUE = 4;
    /**
     * <pre>
     *200~299 about user,account
     * </pre>
     *
     * <code>E_ACCOUNT_NOT_EXIST = 200;</code>
     */
    public static final int E_ACCOUNT_NOT_EXIST_VALUE = 200;
    /**
     * <pre>
     *密码错误
     * </pre>
     *
     * <code>E_PASSWORD_ERROR = 201;</code>
     */
    public static final int E_PASSWORD_ERROR_VALUE = 201;
    /**
     * <pre>
     *账户名错误
     * </pre>
     *
     * <code>E_ACCOUNT_NAME_ERROR = 202;</code>
     */
    public static final int E_ACCOUNT_NAME_ERROR_VALUE = 202;
    /**
     * <pre>
     *用户角色名错误
     * </pre>
     *
     * <code>E_PLAYER_NAME_ERROR = 203;</code>
     */
    public static final int E_PLAYER_NAME_ERROR_VALUE = 203;
    /**
     * <pre>
     *用户角色名重复
     * </pre>
     *
     * <code>E_PLAYER_NAME_DUPLICATE_ERROR = 204;</code>
     */
    public static final int E_PLAYER_NAME_DUPLICATE_ERROR_VALUE = 204;
    /**
     * <pre>
     *账户名重复
     * </pre>
     *
     * <code>E_ACCOUNT_NAME_DUPLICATE_ERROR = 205;</code>
     */
    public static final int E_ACCOUNT_NAME_DUPLICATE_ERROR_VALUE = 205;
    /**
     * <pre>
     *网关未到用户连接
     * </pre>
     *
     * <code>E_USER_CONNECTION_NOT_FOUND = 206;</code>
     */
    public static final int E_USER_CONNECTION_NOT_FOUND_VALUE = 206;
    /**
     * <pre>
     *网关错误
     * </pre>
     *
     * <code>E_GATEWAY_ERROR = 30000;</code>
     */
    public static final int E_GATEWAY_ERROR_VALUE = 30000;
    /**
     * <pre>
     *服务错误
     * </pre>
     *
     * <code>E_SERVICE_ERROR = 30001;</code>
     */
    public static final int E_SERVICE_ERROR_VALUE = 30001;
    /**
     * <pre>
     *缓存错误
     * </pre>
     *
     * <code>E_CACHE_ERROR = 30002;</code>
     */
    public static final int E_CACHE_ERROR_VALUE = 30002;
    /**
     * <pre>
     *数据库错误
     * </pre>
     *
     * <code>E_DB_ERROR = 30003;</code>
     */
    public static final int E_DB_ERROR_VALUE = 30003;
    /**
     * <pre>
     *请求解析错误
     * </pre>
     *
     * <code>E_REQ_PARSE_ERROR = 30004;</code>
     */
    public static final int E_REQ_PARSE_ERROR_VALUE = 30004;
    /**
     * <pre>
     *未知错误
     * </pre>
     *
     * <code>E_UNKNOWN_ERROR = 30005;</code>
     */
    public static final int E_UNKNOWN_ERROR_VALUE = 30005;
    /**
     * <pre>
     *系统错误
     * </pre>
     *
     * <code>E_SYSTEM_ERROR = 30006;</code>
     */
    public static final int E_SYSTEM_ERROR_VALUE = 30006;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static En_Code valueOf(int value) {
      return forNumber(value);
    }

    public static En_Code forNumber(int value) {
      switch (value) {
        case 0: return E_SUSS;
        case 1: return E_ROOM_ID_ERROR;
        case 2: return E_ROOM_PORT_ERROR;
        case 3: return E_ROOM_PID_ERROR;
        case 4: return E_ROOM_NOT_EXIST;
        case 200: return E_ACCOUNT_NOT_EXIST;
        case 201: return E_PASSWORD_ERROR;
        case 202: return E_ACCOUNT_NAME_ERROR;
        case 203: return E_PLAYER_NAME_ERROR;
        case 204: return E_PLAYER_NAME_DUPLICATE_ERROR;
        case 205: return E_ACCOUNT_NAME_DUPLICATE_ERROR;
        case 206: return E_USER_CONNECTION_NOT_FOUND;
        case 30000: return E_GATEWAY_ERROR;
        case 30001: return E_SERVICE_ERROR;
        case 30002: return E_CACHE_ERROR;
        case 30003: return E_DB_ERROR;
        case 30004: return E_REQ_PARSE_ERROR;
        case 30005: return E_UNKNOWN_ERROR;
        case 30006: return E_SYSTEM_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<En_Code>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        En_Code> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<En_Code>() {
            public En_Code findValueByNumber(int number) {
              return En_Code.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.game.rpc.message.st.Code.getDescriptor().getEnumTypes().get(0);
    }

    private static final En_Code[] VALUES = values();

    public static En_Code valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private En_Code(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.game.rpc.message.st.En_Code)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ncode.proto\022\027com.game.rpc.message.st*\331\003" +
      "\n\007En_Code\022\n\n\006E_SUSS\020\000\022\023\n\017E_ROOM_ID_ERROR" +
      "\020\001\022\025\n\021E_ROOM_PORT_ERROR\020\002\022\024\n\020E_ROOM_PID_" +
      "ERROR\020\003\022\024\n\020E_ROOM_NOT_EXIST\020\004\022\030\n\023E_ACCOU" +
      "NT_NOT_EXIST\020\310\001\022\025\n\020E_PASSWORD_ERROR\020\311\001\022\031" +
      "\n\024E_ACCOUNT_NAME_ERROR\020\312\001\022\030\n\023E_PLAYER_NA" +
      "ME_ERROR\020\313\001\022\"\n\035E_PLAYER_NAME_DUPLICATE_E" +
      "RROR\020\314\001\022#\n\036E_ACCOUNT_NAME_DUPLICATE_ERRO" +
      "R\020\315\001\022 \n\033E_USER_CONNECTION_NOT_FOUND\020\316\001\022\025" +
      "\n\017E_GATEWAY_ERROR\020\260\352\001\022\025\n\017E_SERVICE_ERROR" +
      "\020\261\352\001\022\023\n\rE_CACHE_ERROR\020\262\352\001\022\020\n\nE_DB_ERROR\020" +
      "\263\352\001\022\027\n\021E_REQ_PARSE_ERROR\020\264\352\001\022\025\n\017E_UNKNOW" +
      "N_ERROR\020\265\352\001\022\024\n\016E_SYSTEM_ERROR\020\266\352\001B\037\n\027com" +
      ".game.rpc.message.stB\004Codeb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
